// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// KSBound
Rcpp::List KSBound(int mcmc_samples, int m_max, arma::mat spatial_neighbors, arma::vec y, arma::vec offset, arma::mat x, arma::vec mhvar_beta, arma::vec mhvar_theta, Rcpp::Nullable<Rcpp::NumericVector> beta_mu_prior, Rcpp::Nullable<Rcpp::NumericVector> beta_sd_prior, Rcpp::Nullable<double> sigma2_theta_a_prior, Rcpp::Nullable<double> sigma2_theta_b_prior, Rcpp::Nullable<double> alpha_a_prior, Rcpp::Nullable<double> alpha_b_prior, Rcpp::Nullable<Rcpp::NumericVector> beta_init, Rcpp::Nullable<Rcpp::NumericVector> theta_init, Rcpp::Nullable<double> sigma2_theta_init, Rcpp::Nullable<Rcpp::NumericVector> g_init, Rcpp::Nullable<Rcpp::NumericVector> v_init, Rcpp::Nullable<double> alpha_init, Rcpp::Nullable<Rcpp::NumericVector> psi_init, Rcpp::Nullable<double> alpha_fix);
RcppExport SEXP _KSBound_KSBound(SEXP mcmc_samplesSEXP, SEXP m_maxSEXP, SEXP spatial_neighborsSEXP, SEXP ySEXP, SEXP offsetSEXP, SEXP xSEXP, SEXP mhvar_betaSEXP, SEXP mhvar_thetaSEXP, SEXP beta_mu_priorSEXP, SEXP beta_sd_priorSEXP, SEXP sigma2_theta_a_priorSEXP, SEXP sigma2_theta_b_priorSEXP, SEXP alpha_a_priorSEXP, SEXP alpha_b_priorSEXP, SEXP beta_initSEXP, SEXP theta_initSEXP, SEXP sigma2_theta_initSEXP, SEXP g_initSEXP, SEXP v_initSEXP, SEXP alpha_initSEXP, SEXP psi_initSEXP, SEXP alpha_fixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type mcmc_samples(mcmc_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type m_max(m_maxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type spatial_neighbors(spatial_neighborsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mhvar_beta(mhvar_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mhvar_theta(mhvar_thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type beta_mu_prior(beta_mu_priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type beta_sd_prior(beta_sd_priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type sigma2_theta_a_prior(sigma2_theta_a_priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type sigma2_theta_b_prior(sigma2_theta_b_priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type alpha_a_prior(alpha_a_priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type alpha_b_prior(alpha_b_priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type sigma2_theta_init(sigma2_theta_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type g_init(g_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type v_init(v_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type psi_init(psi_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type alpha_fix(alpha_fixSEXP);
    rcpp_result_gen = Rcpp::wrap(KSBound(mcmc_samples, m_max, spatial_neighbors, y, offset, x, mhvar_beta, mhvar_theta, beta_mu_prior, beta_sd_prior, sigma2_theta_a_prior, sigma2_theta_b_prior, alpha_a_prior, alpha_b_prior, beta_init, theta_init, sigma2_theta_init, g_init, v_init, alpha_init, psi_init, alpha_fix));
    return rcpp_result_gen;
END_RCPP
}
// alpha_update
double alpha_update(arma::vec v, double alpha_a, double alpha_b);
RcppExport SEXP _KSBound_alpha_update(SEXP vSEXP, SEXP alpha_aSEXP, SEXP alpha_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_a(alpha_aSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_b(alpha_bSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha_update(v, alpha_a, alpha_b));
    return rcpp_result_gen;
END_RCPP
}
// beta_update
Rcpp::List beta_update(arma::vec y, arma::vec offset, arma::mat x, arma::vec beta_old, arma::vec theta_old, arma::vec g_old, arma::vec beta_mu, arma::vec beta_sd, arma::vec mhvar_beta, arma::vec acctot_beta);
RcppExport SEXP _KSBound_beta_update(SEXP ySEXP, SEXP offsetSEXP, SEXP xSEXP, SEXP beta_oldSEXP, SEXP theta_oldSEXP, SEXP g_oldSEXP, SEXP beta_muSEXP, SEXP beta_sdSEXP, SEXP mhvar_betaSEXP, SEXP acctot_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta_old(theta_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_old(g_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_sd(beta_sdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mhvar_beta(mhvar_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type acctot_beta(acctot_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_update(y, offset, x, beta_old, theta_old, g_old, beta_mu, beta_sd, mhvar_beta, acctot_beta));
    return rcpp_result_gen;
END_RCPP
}
// g_update
arma::vec g_update(arma::vec y, arma::vec offset, arma::mat x, arma::vec beta, arma::vec theta, arma::vec c, arma::vec u, arma::mat p);
RcppExport SEXP _KSBound_g_update(SEXP ySEXP, SEXP offsetSEXP, SEXP xSEXP, SEXP betaSEXP, SEXP thetaSEXP, SEXP cSEXP, SEXP uSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(g_update(y, offset, x, beta, theta, c, u, p));
    return rcpp_result_gen;
END_RCPP
}
// neg_two_loglike_update
double neg_two_loglike_update(arma::vec y, arma::vec offset, arma::mat x, arma::vec beta, arma::vec theta, arma::vec g);
RcppExport SEXP _KSBound_neg_two_loglike_update(SEXP ySEXP, SEXP offsetSEXP, SEXP xSEXP, SEXP betaSEXP, SEXP thetaSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_two_loglike_update(y, offset, x, beta, theta, g));
    return rcpp_result_gen;
END_RCPP
}
// sigma2_theta_update
double sigma2_theta_update(arma::vec theta, double sigma2_theta_a, double sigma2_theta_b);
RcppExport SEXP _KSBound_sigma2_theta_update(SEXP thetaSEXP, SEXP sigma2_theta_aSEXP, SEXP sigma2_theta_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_theta_a(sigma2_theta_aSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_theta_b(sigma2_theta_bSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma2_theta_update(theta, sigma2_theta_a, sigma2_theta_b));
    return rcpp_result_gen;
END_RCPP
}
// theta_update
Rcpp::List theta_update(arma::vec y, arma::vec offset, arma::mat x, arma::vec beta, arma::vec theta_old, double sigma2_theta_old, arma::vec g_old, arma::vec mhvar_theta, arma::vec acctot_theta);
RcppExport SEXP _KSBound_theta_update(SEXP ySEXP, SEXP offsetSEXP, SEXP xSEXP, SEXP betaSEXP, SEXP theta_oldSEXP, SEXP sigma2_theta_oldSEXP, SEXP g_oldSEXP, SEXP mhvar_thetaSEXP, SEXP acctot_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta_old(theta_oldSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_theta_old(sigma2_theta_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_old(g_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mhvar_theta(mhvar_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type acctot_theta(acctot_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_update(y, offset, x, beta, theta_old, sigma2_theta_old, g_old, mhvar_theta, acctot_theta));
    return rcpp_result_gen;
END_RCPP
}
// u_p_c_update
Rcpp::List u_p_c_update(arma::mat spatial_neighbors, arma::vec v, arma::vec psi, arma::vec g);
RcppExport SEXP _KSBound_u_p_c_update(SEXP spatial_neighborsSEXP, SEXP vSEXP, SEXP psiSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type spatial_neighbors(spatial_neighborsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(u_p_c_update(spatial_neighbors, v, psi, g));
    return rcpp_result_gen;
END_RCPP
}
// v_psi_update
Rcpp::List v_psi_update(int m_max, arma::mat spatial_neighbors, arma::vec y, arma::vec g, double alpha_old);
RcppExport SEXP _KSBound_v_psi_update(SEXP m_maxSEXP, SEXP spatial_neighborsSEXP, SEXP ySEXP, SEXP gSEXP, SEXP alpha_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m_max(m_maxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type spatial_neighbors(spatial_neighborsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_old(alpha_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(v_psi_update(m_max, spatial_neighbors, y, g, alpha_old));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_KSBound_KSBound", (DL_FUNC) &_KSBound_KSBound, 22},
    {"_KSBound_alpha_update", (DL_FUNC) &_KSBound_alpha_update, 3},
    {"_KSBound_beta_update", (DL_FUNC) &_KSBound_beta_update, 10},
    {"_KSBound_g_update", (DL_FUNC) &_KSBound_g_update, 8},
    {"_KSBound_neg_two_loglike_update", (DL_FUNC) &_KSBound_neg_two_loglike_update, 6},
    {"_KSBound_sigma2_theta_update", (DL_FUNC) &_KSBound_sigma2_theta_update, 3},
    {"_KSBound_theta_update", (DL_FUNC) &_KSBound_theta_update, 9},
    {"_KSBound_u_p_c_update", (DL_FUNC) &_KSBound_u_p_c_update, 4},
    {"_KSBound_v_psi_update", (DL_FUNC) &_KSBound_v_psi_update, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_KSBound(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
